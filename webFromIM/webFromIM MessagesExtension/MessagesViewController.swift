//
//  MessagesViewController.swift
//  webFromIM MessagesExtension
//
//  Created by Andrew Dent on 12/1/19.
//  Copyright Â© 2019 Touchgram Pty Ltd. All rights reserved.
//

import UIKit
import os
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    @IBOutlet fileprivate weak var openWeb: UIButton!
    @IBOutlet fileprivate weak var statusLabel: UILabel!
    
    let testUrl = URL(string: "https://github.com/AndyDentFree/im-plausibilities")
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    func toggleButtons(starting:Bool) {
    }
    
    // MARK: - Conversation Handling
    func hasIncoming(message: MSMessage) {
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        // NOTE that means you may have launched the extension to compose a new message OR selected previous, which also hits didSelect
        
        // Use this method to configure the extension and restore previously stored state.
    }

    override func didBecomeActive(with conversation: MSConversation) {
        guard let sel = conversation.selectedMessage else {
            os_log("didBecomeActive with no selectedMessage in conversation")
            toggleButtons(starting: true)
            return
        }
        print("didBecomeActive \(sel.debugDescription)\n URL \(sel.url?.absoluteString ?? "no URL")")
        hasIncoming(message: sel)
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }

    override func didSelect(_ message: MSMessage, conversation: MSConversation) {
        os_log("didSelect")
        print("didSelect \(message.debugDescription)\n URL \(message.url?.absoluteString ?? "no URL")")
        super.didSelect(message, conversation: conversation)
        hasIncoming(message: message)
    }

    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device. ONLY if the message arrives whilst
        // this extension is active (ie: composing a new message with it)
        hasIncoming(message: message)
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
 
    
    // MARK: - Buttons

    @IBAction public func onOpenWeb(_ sender: UIButton)  {
        guard let url = testUrl else {return}
        
        // technique that works rather than self.extensionContext.open
        var responder = self as UIResponder?
/* old approach using openURL which has now been deprecated
         if responder?.responds(to: #selector(UIApplication.openURL(_:))) == true{
         responder?.perform(#selector(UIApplication.openURL(_:)), with: url)
 */
        let handler = { (success:Bool) -> () in
            if success {
                os_log("Finished opening URL")
            } else {
                os_log("Failed to open URL")
            }
        }

        /**
         approach that worked up until XCode 11.2 with the iOS 13 SDK, even when targeting ios12.1
         
         From XCode 11.x onwards this fails to compile with
         'open(_:options:completionHandler:)' is unavailable in application extensions for iOS
         
        let openSel = #selector(UIApplication.open(_:options:completionHandler:))
        while (responder != nil){
            if responder?.responds(to: openSel ) == true{
                // cannot package up multiple args to openSel so we explicitly call it on the iMessage application instance
                // found by iterating up the chain
                (responder as? UIApplication)?.open(url, completionHandler:handler)  // perform(openSel, with: url)
                return
            }
            responder = responder!.next
        }
         */
        self.extensionContext?.open(url, completionHandler: handler)
    }
}
