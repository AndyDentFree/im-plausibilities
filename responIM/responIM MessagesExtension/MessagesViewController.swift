//
//  MessagesViewController.swift
//  responIM MessagesExtension
//
//  Created by Andrew Dent on 12/1/19.
//  Copyright Â© 2019 Touchgram Pty Ltd. All rights reserved.
//

import UIKit
import os
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    @IBOutlet fileprivate weak var startBtn: UIButton!
    @IBOutlet fileprivate weak var respondBtn: UIButton!
    @IBOutlet fileprivate weak var statusLabel: UILabel!
    
    var responseCount:Int? = nil
    let responseKey = "responseCount"
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    func toggleButtons(starting:Bool) {
        // adjust alpha because emjoi buttons don't get grayed when disabled
        startBtn.isEnabled = starting
        startBtn.alpha = starting ? 1.0 : 0.5
        respondBtn.isEnabled = !starting
        respondBtn.alpha = starting ? 0.5 : 1.0
    }
    
    // MARK: - Conversation Handling
    func hasIncoming(message: MSMessage) {
        // Use this method to trigger UI updates in response to the message.
        guard let url = message.url else { return }
        guard let comps = URLComponents(url: url, resolvingAgainstBaseURL: true) else { return }
        var parsedResponse = false
        if let msgResp = comps.queryItems?.first(where: { $0.name == responseKey })?.value {
            if let parsedCount = Int(msgResp) {
                responseCount = parsedCount + 1
                statusLabel.text = "Respond number '\(parsedCount)' in exchange"
                parsedResponse = true
            }
        }
        
        if !parsedResponse {
            statusLabel.text = "Send first response"
            responseCount = 1
        }
        toggleButtons(starting: false)
    }
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        // NOTE that means you may have launched the extension to compose a new message OR selected previous, which also hits didSelect
        
        // Use this method to configure the extension and restore previously stored state.
    }

    override func didBecomeActive(with conversation: MSConversation) {
        guard let sel = conversation.selectedMessage else {
            os_log("didBecomeActive with no selectedMessage in conversation")
            toggleButtons(starting: true)
            return
        }
        print("didBecomeActive \(sel.debugDescription)\n URL \(sel.url?.absoluteString ?? "no URL")")
        hasIncoming(message: sel)
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }

    override func didSelect(_ message: MSMessage, conversation: MSConversation) {
        os_log("didSelect")
        print("didSelect \(message.debugDescription)\n URL \(message.url?.absoluteString ?? "no URL")")
        super.didSelect(message, conversation: conversation)
        hasIncoming(message: message)
    }

    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device. ONLY if the message arrives whilst
        // this extension is active (ie: composing a new message with it)
        hasIncoming(message: message)
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    func send(label:String) {
        guard let conversation = activeConversation else { fatalError("Expected a conversation") }
        guard var urlComps = URLComponents(string:"data:,") else {
            fatalError("Invalid base URL")
        }
        var qi = [URLQueryItem]()
        if responseCount != nil {
            qi.append(URLQueryItem(name:responseKey, value:"\(responseCount!)"))
        }        
        urlComps.queryItems = qi
        let layout = MSMessageTemplateLayout()
        layout.caption = label
        let session = conversation.selectedMessage?.session
        let message = MSMessage(session: session ?? MSSession())
        message.layout = layout
        message.url = urlComps.url
        conversation.send(message) { (error) in
            if let error = error {
                os_log("Error with MSConversation.insert(message)")
                print(error)
            }
        }
        dismiss()
    }

    
    // MARK: - Buttons

    @IBAction public func onStart(_ sender: UIButton)  {
        send(label:"Initial message")
    }

    @IBAction public func onRespond(_ sender: UIButton)  {
        send(label:"A response")
    }
}
