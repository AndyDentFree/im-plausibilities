//
//  MessagesViewController.swift
//  imPiggie IM
//
//  Created by Andrew Dent on 18/1/19.
//  Copyright Â© 2019 Touchgram Pty Ltd. All rights reserved.
//

import UIKit
import os
import Messages
import PostHog

class MessagesViewController: MSMessagesAppViewController {
    
    @IBOutlet fileprivate weak var happyBtn: UIButton!
    @IBOutlet fileprivate weak var quizzicalBtn: UIButton!
    @IBOutlet fileprivate weak var distraughtBtn: UIButton!
    @IBOutlet fileprivate weak var angryBtn: UIButton!
    @IBOutlet fileprivate weak var statusLabel: UILabel!
    
    var receivedMood:Mood? = nil
    let responseKey = "respondingTo"
    let senderTimestampKey = "sentTS"
    var enabled = [Bool]()
    lazy var buttons = [happyBtn, quizzicalBtn, distraughtBtn, angryBtn]

    func enableButtons() {
        for (i, isOn) in enabled.enumerated() {
            // emoji not dimmed if disabled, still need to change appearance
            // note this is a little different to main app - there we dim but they still are enabled
            buttons[i]?.isEnabled = isOn
            buttons[i]?.alpha = isOn ? 1.0 : 0.3
            // WEIRD SIDE-EFFECT OF BEING IN IMESSAGE
            // in main app, could set button.alpha OR buttons.titleLabel?.alpha
        }
        //view.setNeedsDisplay()
    }

    override func viewDidLoad() {
        os_log("viewDidLoad")
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        enabled = SharedData.current.loadEnabled()
        enableButtons()
    }
    
    // MARK: - Conversation Handling
    func hasIncoming(message: MSMessage) {
        // Use this method to trigger UI updates in response to the message.
        guard let url = message.url else {
            os_log("hasIncoming but no message URL")
            return
        }
        os_log("hasIncoming parsing message")
        guard let comps = URLComponents(url: url, resolvingAgainstBaseURL: true) else { return }
        if let msgMood = comps.queryItems?.first(where: { $0.name == Mood.moodKey })?.value {
            if let parsedMood = Mood(rawValue: msgMood) {
                receivedMood = parsedMood
                statusLabel.text = "Respond to '\(msgMood)'"
                // TODO parse the responseKey and do fancier stuff
            }
        }
    }
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        // NOTE that means you may have launched the extension to compose a new message OR selected previous, which also hits didSelect
        
        // Use this method to configure the extension and restore previously stored state.
        os_log("willBecomeActive")
        PostHogPen.setup()
    }
    
    override func didBecomeActive(with conversation: MSConversation) {
        guard let sel = conversation.selectedMessage else {
            os_log("didBecomeActive with no selectedMessage in conversation")
            return
        }
        print("didBecomeActive \(sel.debugDescription)\n URL \(sel.url?.absoluteString ?? "no URL")")
        hasIncoming(message: sel)
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
        os_log("didResignActive")
    }
   
    override func didSelect(_ message: MSMessage, conversation: MSConversation) {
        os_log("didSelect")
        print("didSelect \(message.debugDescription)\n URL \(message.url?.absoluteString ?? "no URL")")
        super.didSelect(message, conversation: conversation)
        hasIncoming(message: message)
    }

    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device. ONLY if the message arrives whilst
        // this extension is active (ie: composing a new message with it)
        hasIncoming(message: message)
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
        os_log("didStartSending")
        print("didStartSending \(message.debugDescription)\n URL \(message.url?.absoluteString ?? "no URL")")
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
        os_log("didCancelSending")
        print("didCancelSending \(message.debugDescription)\n URL \(message.url?.absoluteString ?? "no URL")")
}
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

    func buttonMatching(mood:Mood) -> UIButton {
        switch mood {
        case .happy: return happyBtn
        case .quizzical: return quizzicalBtn
        case .distraught: return distraughtBtn
        default: return angryBtn
        }
    }
    
    func send(mood:Mood, label:String) {
        guard let conversation = activeConversation else { fatalError("Expected a conversation") }
        guard var urlComps = URLComponents(string:"data:,") else {
            fatalError("Invalid base URL")
        }
        var qi = [
            URLQueryItem(name: Mood.moodKey, value:mood.rawValue)
        ]
        if receivedMood != nil {
            qi.append(URLQueryItem(name:responseKey, value:receivedMood!.rawValue))
        }        
        qi.append(URLQueryItem(name:senderTimestampKey, value:Date().description))
        urlComps.queryItems = qi
        let layout = MSMessageTemplateLayout()
        layout.caption = label
        let session = conversation.selectedMessage?.session
        let message = MSMessage(session: session ?? MSSession())
        message.layout = layout
        message.url = urlComps.url
        PostHogPen.trough?.capture("sending", properties: ["mood": mood.rawValue])
        conversation.insert(message) { (error) in
            if let error = error {
                os_log("Error with MSConversation.insert(message)")
                print(error)
            }
        }
        PostHogPen.trough?.flush()  // flush every time so events logged
        dismiss()
    }

    
    // MARK: - Buttons

    @IBAction public func onHappy(_ sender: UIButton)  {
        send(mood:.happy, label:sender.currentTitle!)
    }

    @IBAction public func onQuizzical(_ sender: UIButton)  {
        send(mood:.quizzical, label:sender.currentTitle!)
    }

    @IBAction public func onDistraught(_ sender: UIButton)  {
        send(mood:.distraught, label:sender.currentTitle!)
    }

    @IBAction public func onAngry(_ sender: UIButton)  {
        send(mood:.angry, label:sender.currentTitle!)
    }

    // WARNING due to Simulator/XCode bugs, trying to invoke this in the simulator will cause a SIGKILL as it exits the iMessage context
    // that was the case in XCode 10 at least
    @IBAction func onLaunchApp(_ sender: Any) {
        guard let url: URL = URL(string: "imPiggie://?arbitraryParam=nothingSpecial") else { return }
        PostHogPen.trough?.capture("launch app")

        self.extensionContext?.open(url, completionHandler: { (success: Bool) in
            // nothing, we invoked the main app!
        })
    }
}
